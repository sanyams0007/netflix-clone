[{"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\index.js":"1","C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\App.js":"2","C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\reportWebVitals.js":"3","C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\requests.js":"4","C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\Navbar.js":"5","C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\Row.js":"6","C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\Banner.js":"7","C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\axios.js":"8","C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\Overview.js":"9"},{"size":288,"mtime":1607682035301,"results":"10","hashOfConfig":"11"},{"size":929,"mtime":1607761459065,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":724,"mtime":1607761548116,"results":"14","hashOfConfig":"11"},{"size":1282,"mtime":1607795969911,"results":"15","hashOfConfig":"11"},{"size":5079,"mtime":1607794077700,"results":"16","hashOfConfig":"11"},{"size":1874,"mtime":1607700924160,"results":"17","hashOfConfig":"11"},{"size":204,"mtime":1607683176817,"results":"18","hashOfConfig":"11"},{"size":2077,"mtime":1607784883282,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"dd0z9p",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\index.js",[],["41","42"],"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\App.js",[],"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\reportWebVitals.js",[],"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\requests.js",[],"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\Navbar.js",[],"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\Row.js",["43"],"import React, { useState, useEffect } from 'react'\r\nimport axios from './axios';\r\n//import Overview from './Overview';\r\nimport './Row.css';\r\n//import './Row2.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer'\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState('');\r\n    const [overview, setOverview] = useState('off');\r\n    const [feature, setFeature] = useState({\r\n        title: \"\",\r\n        plot: \"\",\r\n        wall: \"\",\r\n    });\r\n\r\n    // a snippet of code which runs based on a condition\r\n    useEffect(() => {\r\n        //if [] run once when the row loads, and dont run again\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl])\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const playTrailer = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            /*  movieTrailer(movie?.name || movie?.title || movie?.original_name || \"\") */\r\n            movieTrailer(movie || \"\")\r\n                .then(url => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n                    console.log(\"done\");\r\n                })\r\n                .catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if (overview === 'on') {\r\n            setOverview(\"off\");\r\n        } else {\r\n            setOverview(overview === \"on\" ? \"off\" : \"on\");\r\n            setFeature(() => {\r\n                return {\r\n                    title: movie?.name || movie?.title || movie?.original_name,\r\n                    plot: movie?.overview,\r\n                    wall: `${base_url}${movie.backdrop_path}`,\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n    //{truncate(movie?.overview, 500)}\r\n    //console.log(movies);\r\n    //console.table(movies);\r\n\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n\r\n            {/* <div className='row_posters'>\r\n                {movies.map(movie => {\r\n                    return (\r\n                        <div className='additional'>\r\n                            <img\r\n                                key={movie.id}\r\n                                onClick={() => handleClick(movie)}\r\n                                 onClick={() => handleClick(movie)} \r\n                                className={`row_poster ${isLargeRow && 'row_posterLarge'}`}\r\n                                src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                                alt={movie.name}\r\n                            />\r\n                            <h5 className=\"row_movie_title\">{movie?.name || movie?.title || movie?.original_name}</h5>\r\n                            <div className={`overview overview_${overview}`}>\r\n                                <Overview\r\n                                    movie={movie}\r\n                                    update={handleClick}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div> */}\r\n\r\n            <div className='row_posters'>\r\n                {movies.map(movie => (\r\n                    <img\r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row_poster ${isLargeRow && 'row_posterLarge'}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                        alt={movie.name}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <div className={`feature overview_${overview}`}>\r\n                <div className=\"left\">\r\n                    <h2>{feature?.title}</h2>\r\n                    <p>{feature.plot}{truncate(feature?.plot, 450)}</p>\r\n                    <button className='play_button'\r\n                        onClick={() => playTrailer(feature?.title)}\r\n                    >\r\n                        Play\r\n                    </button>\r\n                    <button className='play_button'\r\n                        onClick={handleClick}\r\n                    >\r\n                        Close\r\n                </button>\r\n                </div>\r\n                <img\r\n                    className='right'\r\n                    src={feature?.wall}\r\n                />\r\n            </div>\r\n\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n\r\n\r\n","C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\Banner.js",[],"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\axios.js",[],["44","45"],"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\netflix-clone\\src\\Overview.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":134,"column":17,"nodeType":"52","endLine":137,"endColumn":19},{"ruleId":"46","replacedBy":"53"},{"ruleId":"48","replacedBy":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["55"],["56"],"no-global-assign","no-unsafe-negation"]